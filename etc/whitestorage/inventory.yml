all:
  vars:
    ceph_stable_openstack_release_uca: victoria
    # Default dashboard_interface is public_interface
    # dashboard_interface: ens10
    public_interface: ens3
    public_network: 10.100.8.0/21
    private_network: 20.0.0.0/24
    virtual_ip: ${ ipVip }
    devices:
      - /dev/vdb
    dashboard_admin_user: admin
    dashboard_admin_password: p1l4bl4nc4
    grafana_admin_password: p1l4bl4nc4
    whitestorage_tag: perseus-13.1
    ceph_docker_image_tag: "{{whitestorage_tag}}"
    grafana_container_image: "gcr.io/whitestorage/whitestorage-grafana:{{whitestorage_tag}}"
    prometheus_container_image: "gcr.io/whitestorage/whitestorage-prometheus:{{whitestorage_tag}}"
    alertmanager_container_image: "gcr.io/whitestorage/whitestorage-alertmanager:{{whitestorage_tag}}"
    node_exporter_container_image: "gcr.io/whitestorage/whitestorage-node-exporter:{{whitestorage_tag}}"

    # offline_installation: true
    # offline_apt_repository: "192.168.0.1:3142"
    # ceph_docker_registry: "192.168.1.108:5000"
    # haproxy_exporter_image: "192.168.1.108:5000/whitestorage/whitestorage-haproxy-exporter:{{whitestorage_tag}}"
    # haproxy_http_port: 80
    # haproxy_exporter_host_port: 9101
    # haproxy_user: haproxy_user_wh1t3st4ck
    # haproxy_password: haproxy_password_wh1t3st4ck
    # keepalived_virtual_router_id: 51
    # keepalived_password: keepalived_password_wh1t3st4ck

    # enabled by default for new installments
    # please review carefully if this option is really needed for your specific use case
    # wipe_virtual_disks: False
    wipe_virtual_disks: true 

    # enable_SSO: False
    # sso_admin_user: admin-storage
    # keycloak_protocol: http
    # keycloak_ip: 10.100.10.242
    # keycloak_port: 31714
    # keycloak_realm: TestTelcoCloud
    # dashboard_users_password: dashboard_wh1t3st4ck

    # radosgw_frontend_type: civetweb
    # radosgw_civetweb_port: 8080
    # copy_admin_key: true
    # radosgw_interface: ens3

    # dashboard_protocol: https
    # dashboard_crt: /etc/whitestorage/dashboard.crt
    # dashboard_key: /etc/whitestorage/dashboard.pem

    # enable_prometheus_tls: True
    # prometheus_crt: ''
    # prometheus_key: ''
    # alertmanager_crt: ''
    # alertmanager_key: ''

    # ceph_conf_overrides:
    #   global:
    #     log_to_syslog: true
    #     err_to_syslog: true
    #     debug_mon: 1
    #     debug_mgr: 1
    #     debug_osd: 1

    # external_rsyslog: 10.100.19.99:514
    # syslog_keywords:
    #   - error
    #   - warning
    #   - debug # verbose!
    #   - cluster

    docker_pull_retry: 5
    docker_pull_timeout: "600s"

  hosts:  # must all be different IPs!
%{ for ipPublicNode in split(",", ipPublicNodesString) ~}
   ${prefix}node-${index(split(",", ipPublicNodesString), ipPublicNode)}:
      username: ubuntu
      public_ip: ${ipPublicNode}
      private_ip: ${split(",", ipPrivateNodesString)[index(split(",", ipPublicNodesString), ipPublicNode)]}
%{ endfor ~}
  children:
    mons:
      hosts:
%{ for ipPublicNode in split(",", ipPublicNodesString) ~}
%{ if index(split(",", ipPublicNodesString), ipPublicNode) < amountAdminNodes ~}
        ${prefix}node-${index(split(",", ipPublicNodesString), ipPublicNode)}: {}
%{ endif ~}
%{ endfor ~}
    mgrs:
      hosts:
%{ for ipPublicNode in split(",", ipPublicNodesString) ~}
%{ if index(split(",", ipPublicNodesString), ipPublicNode) < amountAdminNodes ~}
        ${prefix}node-${index(split(",", ipPublicNodesString), ipPublicNode)}: {}
%{ endif ~}
%{ endfor ~}
    osds:
      hosts:
%{ for ipPublicNode in split(",", ipPublicNodesString) ~}
# #amountAdminNodes >= #nodes -> install in all nodes
%{ if amountAdminNodes >= length(split(",", ipPublicNodesString)) || controlAsCompute ~}
        ${prefix}node-${index(split(",", ipPublicNodesString), ipPublicNode)}: {}
%{ else ~}  # #amountAdminNodes < #nodes -> install only in non-admin nodes
# only print when not working in one of first admin nodes
%{ if index(split(",", ipPublicNodesString), ipPublicNode) >= amountAdminNodes ~}
        ${prefix}node-${index(split(",", ipPublicNodesString), ipPublicNode)}: {}
%{ endif ~}
%{ endif ~}
%{ endfor ~}
    clients:
      hosts:
        ${prefix}node-0: {}
    grafana-server:
      hosts:
        ${prefix}node-0: {}
